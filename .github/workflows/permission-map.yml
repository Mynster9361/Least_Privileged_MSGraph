name: Update Graph API Permissions Map

on:
  schedule:
    # Run weekly on Sunday at 2am
    - cron: '0 2 * * 0'
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write

jobs:
  update-permissions-map:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository
        uses: actions/checkout@v3
        with:
          path: my-repo

      - name: Checkout Microsoft Graph Docs
        uses: actions/checkout@v3
        with:
          repository: microsoftgraph/microsoft-graph-docs-contrib
          path: ms-graph-docs
          ref: main

      - name: Process Graph API Permissions
        shell: pwsh
        run: |
          cd my-repo
          #pwsh -File ./Convert-PermissionMap.ps1 -DocsPath "../ms-graph-docs"
          pwsh -File ./newConvert-PermissionMap.ps1 -DocsPath "../ms-graph-docs"

      - name: Check for changes and gather stats
        id: changes
        run: |
          cd my-repo
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add graph_api_permissions_friendly_names.json
          git add graph_api_permissions_map.json
          git add graph_api_permissions_endpoints.json

          # Check if there are changes
          if git diff --staged --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Get file stats
            friendly_names_count=$(jq length graph_api_permissions_friendly_names.json 2>/dev/null || echo "0")
            map_count=$(jq length graph_api_permissions_map.json 2>/dev/null || echo "0")
            endpoints_count=$(jq length graph_api_permissions_endpoints.json 2>/dev/null || echo "0")
            
            echo "friendly_names_count=$friendly_names_count" >> $GITHUB_OUTPUT
            echo "map_count=$map_count" >> $GITHUB_OUTPUT
            echo "endpoints_count=$endpoints_count" >> $GITHUB_OUTPUT
            
            # Get changed files info
            changed_files=$(git diff --staged --name-only | tr '\n' ' ')
            echo "changed_files=$changed_files" >> $GITHUB_OUTPUT
            
            # Analyze changes for each file and capture actual diff content
            change_details=""
            diff_content=""
            for file in $(git diff --staged --name-only); do
              if [ -f "$file" ]; then
                # Get line change counts
                additions=$(git diff --staged --numstat "$file" | cut -f1)
                deletions=$(git diff --staged --numstat "$file" | cut -f2)
                
                # Count actual content changes (not just line shifts)
                if [ "$additions" -le 20 ] && [ "$deletions" -le 20 ]; then
                  # Small changes - capture actual diff content
                  file_diff=$(git diff --staged "$file" | grep -E "^\+[^+]|^\-[^-]" | head -20)
                  if [ ! -z "$file_diff" ]; then
                    change_details="${change_details}${file}:SMALL_CHANGES:${additions}:${deletions};"
                    # Base64 encode the diff content to avoid all escaping issues
                    clean_diff=$(echo "$file_diff" | sed 's/^[+-]//' | base64 -w 0)
                    diff_content="${diff_content}${file}:::${clean_diff};;;"
                  fi
                else
                  # Large changes - just show stats
                  change_details="${change_details}${file}:LARGE_CHANGES:${additions}:${deletions};"
                fi
              fi
            done
            
            echo "change_details=$change_details" >> $GITHUB_OUTPUT
            echo "diff_content=$diff_content" >> $GITHUB_OUTPUT
            echo "Changes detected in: $changed_files"
          fi

      - name: Commit and Push Changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          cd my-repo
          git commit -m "Update Graph API permissions map [skip ci]"
          git push

      - name: Send Discord Notification
        if: steps.changes.outputs.has_changes == 'true'
        shell: pwsh
        run: |
          $webhookUrl = "${{ secrets.DISCORD_WEBHOOK_URL }}"
          
          if ([string]::IsNullOrWhiteSpace($webhookUrl)) {
            Write-Host "‚ö†Ô∏è Discord webhook URL not configured in secrets"
            exit 0
          }
          
          $friendlyNamesCount = "${{ steps.changes.outputs.friendly_names_count }}"
          $mapCount = "${{ steps.changes.outputs.map_count }}"
          $endpointsCount = "${{ steps.changes.outputs.endpoints_count }}"
          $changedFiles = "${{ steps.changes.outputs.changed_files }}"
          $changeDetails = "${{ steps.changes.outputs.change_details }}"
          $diffContent = "${{ steps.changes.outputs.diff_content }}"
          
          $currentTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
          $repoUrl = "https://github.com/${{ github.repository }}"
          $runUrl = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          $commitUrl = "https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          
          # Process change details
          $changeAnalysis = ""
          $codeBlocks = ""
          
          if (![string]::IsNullOrWhiteSpace($changeDetails)) {
            $changes = $changeDetails.Split(';') | Where-Object { $_ -ne '' }
            foreach ($change in $changes) {
              $parts = $change.Split(':')
              if ($parts.Length -eq 4) {
                $fileName = $parts[0]
                $changeType = $parts[1]
                $additions = $parts[2]
                $deletions = $parts[3]
                
                if ($changeType -eq "SMALL_CHANGES") {
                  $changeAnalysis += "üìù **$fileName**`n+$additions/-$deletions lines`n"
                  
                  # Find corresponding diff content with base64 decoding
                  if (![string]::IsNullOrWhiteSpace($diffContent)) {
                    try {
                      $diffEntries = $diffContent.Split(';;;') | Where-Object { $_ -ne '' }
                      foreach ($diffEntry in $diffEntries) {
                        $diffParts = $diffEntry.Split(':::')
                        if ($diffParts.Length -eq 2 -and $diffParts[0] -eq $fileName) {
                          # Decode base64 content
                          $encodedContent = $diffParts[1]
                          $decodedBytes = [System.Convert]::FromBase64String($encodedContent)
                          $decodedContent = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
                          
                          $diffLines = $decodedContent.Split("`n") | Where-Object { $_.Trim() -ne '' }
                          if ($diffLines.Count -gt 0) {
                            # Take first 10 lines to keep Discord message reasonable
                            $limitedLines = $diffLines | Select-Object -First 10
                            $formattedDiff = ($limitedLines | ForEach-Object { $_.Trim() }) -join "`n"
                            
                            # Additional safety - truncate if still too long
                            if ($formattedDiff.Length -gt 1000) {
                              $formattedDiff = $formattedDiff.Substring(0, 1000) + "`n... (truncated)"
                            }
                            
                            # Only add if we have meaningful content - fix backtick escaping
                            if ($formattedDiff.Trim() -ne "") {
                              $codeStart = '```json'
                              $codeEnd = '```'
                              $codeBlocks += "**Changes in $fileName :**`n$codeStart`n$formattedDiff`n$codeEnd`n`n"
                            }
                          }
                          break
                        }
                      }
                    } catch {
                      Write-Host "Warning: Could not process diff content for $fileName : $($_.Exception.Message)"
                    }
                  }
                } else {
                  $diffUrl = "https://github.com/${{ github.repository }}/commit/${{ github.sha }}#diff-" + [System.Web.HttpUtility]::UrlEncode($fileName)
                  $changeAnalysis += "üìä **$fileName**`n+$additions/-$deletions lines - [View Diff]($diffUrl)`n"
                }
              }
            }
          }
          
          if ([string]::IsNullOrWhiteSpace($changeAnalysis)) {
            $changeAnalysis = "Files updated with structural changes"
          }
          
          # Build embed fields
          $embedFields = @(
            @{
              name = "üìä **Statistics**"
              value = "**Permission Names:** $friendlyNamesCount`n**API Mappings:** $mapCount`n**Permission Endpoints:** $endpointsCount"
              inline = $true
            },
            @{
              name = "üìÅ **Change Summary**"
              value = $changeAnalysis
              inline = $false
            }
          )
          
          # Add code blocks if we have small changes - but limit total message size
          if (![string]::IsNullOrWhiteSpace($codeBlocks) -and $codeBlocks.Length -lt 4000) {
            $embedFields += @{
              name = "üîç **Code Changes**"
              value = $codeBlocks
              inline = $false
            }
          } elseif (![string]::IsNullOrWhiteSpace($codeBlocks)) {
            # If code blocks are too long, just mention they exist
            $embedFields += @{
              name = "üîç **Code Changes**"
              value = "Code changes available - [View Commit]($commitUrl) for details"
              inline = $false
            }
          }
          
          $embedFields += @{
            name = "üîó **Links**"
            value = "[View Repository]($repoUrl) | [View Run]($runUrl) | [View Commit]($commitUrl)"
            inline = $false
          }
          
          $embed = @{
            title = "üîÑ Graph API Permissions Map Updated"
            description = "The Microsoft Graph API permissions mapping has been successfully updated!"
            color = 3447003  # Blue color
            fields = $embedFields
            footer = @{
              text = "Updated at $currentTime"
            }
            thumbnail = @{
              url = "https://github.com/microsoft.png"
            }
          }
          
          $payload = @{
            embeds = @($embed)
          } | ConvertTo-Json -Depth 10
          
          try {
            $response = Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $payload -ContentType "application/json"
            Write-Host "‚úÖ Discord notification sent successfully"
          } catch {
            Write-Host "‚ùå Failed to send Discord notification: $($_.Exception.Message)"
            Write-Host "Response: $($_.Exception.Response)"
          }

      - name: Send Discord Notification (No Changes)
        if: steps.changes.outputs.has_changes == 'false'
        shell: pwsh
        run: |
          $webhookUrl = "${{ secrets.DISCORD_WEBHOOK_URL }}"
          
          if ([string]::IsNullOrWhiteSpace($webhookUrl)) {
            Write-Host "‚ö†Ô∏è Discord webhook URL not configured in secrets"
            exit 0
          }
          
          $currentTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
          $repoUrl = "https://github.com/${{ github.repository }}"
          $runUrl = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          $embed = @{
            title = "‚úÖ Graph API Permissions Check Complete"
            description = "No changes detected in the Microsoft Graph API permissions mapping."
            color = 2067276  # Green color
            fields = @(
              @{
                name = "üìù **Status**"
                value = "All files are up to date with the latest Microsoft Graph documentation."
                inline = $false
              },
              @{
                name = "üîó **Links**"
                value = "[View Repository]($repoUrl) | [View Run]($runUrl)"
                inline = $false
              }
            )
            footer = @{
              text = "Checked at $currentTime"
            }
            thumbnail = @{
              url = "https://github.com/microsoft.png"
            }
          }
          
          $payload = @{
            embeds = @($embed)
          } | ConvertTo-Json -Depth 10
          
          try {
            $response = Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $payload -ContentType "application/json"
            Write-Host "‚úÖ Discord notification sent successfully"
          } catch {
            Write-Host "‚ùå Failed to send Discord notification: $($_.Exception.Message)"
            Write-Host "Response: $($_.Exception.Response)"
          }